{"title":"Canvas 图像/视频处理 - 像素操作和滤镜实现","slug":"canvas-core-04-image-processing-and-pixel-manipulation","date":"2020-12-25T12:32:16.000Z","updated":"2020-12-25T12:32:16.000Z","comments":true,"path":"api/articles/canvas-core-04-image-processing-and-pixel-manipulation.json","excerpt":null,"covers":null,"content":"<h2 id=\"图像操作-API\"><a href=\"#图像操作-API\" class=\"headerlink\" title=\"图像操作 API\"></a>图像操作 API</h2><p>图像操作相关接口：</p>\n<ul>\n<li><code>drawImage()</code> 绘制图像到 Canvas 画布，该方法有三个重载方式。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">文档</a></li>\n<li><code>getImageData()</code> 返回一个 ImageData 对象，用于描述 canvas 指定区域的隐含像素数据。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData\">文档</a></li>\n<li><code>putImageData()</code> 将数据从已有的 ImageData 对象绘制到画布上。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData\">文档</a></li>\n<li><code>createImageData()</code> 用于创建一个新的、空白的、指定大小的 ImageData 对象。所有的像素在新对象中都是透明的黑色。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createImageData\">文档</a></li>\n</ul>\n<p>Canvas 2D API 的 <code>drawImage()</code> 有三个重载方法提供了多种在画布（Canvas）上绘制图像的方式。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasDrawImage</span> &#123;<br>    <span class=\"hljs-comment\">/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) */</span><br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dh</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">sx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sh</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dh</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>drawImage()</code> 方法接收一个 <code>CanvasImageSource</code> 类型的数据，这些 <code>HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas | VideoFrame</code> 都可以往 Canvas 画布上绘制。</p>\n<h2 id=\"操作图形像素\"><a href=\"#操作图形像素\" class=\"headerlink\" title=\"操作图形像素\"></a>操作图形像素</h2><h3 id=\"ImageData-介绍\"><a href=\"#ImageData-介绍\" class=\"headerlink\" title=\"ImageData 介绍\"></a>ImageData 介绍</h3><p>ImageData 接口描述 <code>&lt;canvas&gt;</code> 元素的一个隐含像素数据的区域。使用 ImageData() 构造函数创建，或者使用 CanvasRenderingContext2D 对象上的 创建方法 <code>context.createImageData()</code> 和 获取方法 <code>context.getImageData()</code>。也可以使用 <code>context.putImageData()</code> 设置 canvas 的一部分区域。</p>\n<p><code>getImageData()</code> &#x2F; <code>putImageData()</code> 两个方法分别用于获取像素和填充像素，同时也可以修改像素中的值以达到预期效果。getImageData() 方法返回一个 ImageData 类型对象，包含三个属性:</p>\n<ul>\n<li><code>width</code> 以设备像素为单位的图像数据宽度</li>\n<li><code>height</code> 以设备像素为单位的图像数据高度</li>\n<li><code>data</code> 包含各个设备像素值得数组，每个值中包含的颜色分量，都是含有 8 位二进制的整数, 使用 TypedArray 形式 ArrayBuffer 来存储数据</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> imgdata = context.<span class=\"hljs-title function_\">getImageData</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>)<br><span class=\"hljs-keyword\">const</span> data = imgdata.<span class=\"hljs-property\">data</span>;<br><span class=\"hljs-keyword\">const</span> length = imgdata.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">length</span>;<br><span class=\"hljs-keyword\">const</span> width = imgdata.<span class=\"hljs-property\">width</span>;<br><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// red</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// green</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// blue</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// alpha</span><br><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">4</span>]   <span class=\"hljs-comment\">// red</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">3</span>]   <span class=\"hljs-comment\">// green</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">2</span>]   <span class=\"hljs-comment\">// blue</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">1</span>]   <span class=\"hljs-comment\">// alpha</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常见图像像素遍历方式\"><a href=\"#常见图像像素遍历方式\" class=\"headerlink\" title=\"常见图像像素遍历方式\"></a>常见图像像素遍历方式</h3><p>遍历每个像素</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) &#123;<br>  <span class=\"hljs-keyword\">const</span> pixel = data[i]<br>  <span class=\"hljs-comment\">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反向遍历每个像素</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> i = length - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (i &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>  data[i--]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只处理 alpha 值，不改变 r,g,b</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只处理  r,g,b 值，不改变 alpha</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i]               <span class=\"hljs-comment\">// red</span><br>  data[i + <span class=\"hljs-number\">1</span>]           <span class=\"hljs-comment\">// green</span><br>  data[i + <span class=\"hljs-number\">2</span>]           <span class=\"hljs-comment\">// blue</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"图像滤镜实现\"><a href=\"#图像滤镜实现\" class=\"headerlink\" title=\"图像滤镜实现\"></a>图像滤镜实现</h2><p>了解到如何获取和操作像素之后，接下来就可以给图片实现各种滤镜了，滤镜的原理其实就是对图像像素的各种操作，给图像像素做一些改动，主要在于各种滤镜算法实现。</p>\n<h3 id=\"常见图像滤镜\"><a href=\"#常见图像滤镜\" class=\"headerlink\" title=\"常见图像滤镜\"></a>常见图像滤镜</h3><p>负片滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i] = <span class=\"hljs-number\">255</span> - data[i];<br>  data[i + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">255</span> - data[i + <span class=\"hljs-number\">1</span>];<br>  data[i + <span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">255</span> - data[i + <span class=\"hljs-number\">2</span>];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>黑白滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> average = (data[i] + data[i + <span class=\"hljs-number\">1</span>] + data[i + <span class=\"hljs-number\">2</span>]) / <span class=\"hljs-number\">3</span>;<br>  data[i] = average;<br>  data[i + <span class=\"hljs-number\">1</span>] = average;<br>  data[i + <span class=\"hljs-number\">2</span>] = average;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>浮雕滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) &#123;<br>  <span class=\"hljs-comment\">// 防止超出边界</span><br>  <span class=\"hljs-keyword\">if</span> (i &lt;= length - width * <span class=\"hljs-number\">4</span>) &#123;<br>    <span class=\"hljs-comment\">// 不是 alpha</span><br>    <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-comment\">// 如果是一行的最后一个像素，右边不会有像素，拷贝前一个像素值</span><br>      <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">4</span>) % (width * <span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span>) &#123;<br>        data[i] = data[i - <span class=\"hljs-number\">4</span>];<br>        data[i + <span class=\"hljs-number\">1</span>] = data[i - <span class=\"hljs-number\">3</span>];<br>        data[i + <span class=\"hljs-number\">2</span>] = data[i - <span class=\"hljs-number\">2</span>];<br>        data[i + <span class=\"hljs-number\">3</span>] = data[i - <span class=\"hljs-number\">1</span>];<br>        i += <span class=\"hljs-number\">4</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 不是一行的最后一个像素</span><br>        data[i] =<br>          <span class=\"hljs-number\">255</span> / <span class=\"hljs-number\">2</span> + <span class=\"hljs-comment\">// Average value</span><br>          <span class=\"hljs-number\">2</span> * data[i] - <span class=\"hljs-comment\">// current pixel</span><br>          data[i + <span class=\"hljs-number\">4</span>] - <span class=\"hljs-comment\">// next pixel</span><br>          data[i + width * <span class=\"hljs-number\">4</span>]; <span class=\"hljs-comment\">// pixel underneath</span><br>      &#125;<br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <br>    <span class=\"hljs-comment\">// 最后一行，下方没有像素，拷贝上方像素</span><br>    <span class=\"hljs-keyword\">if</span> ( (i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>      data[i] = data[i - width * <span class=\"hljs-number\">4</span>];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>墨镜滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> ( (i + <span class=\"hljs-number\">4</span>) % (width * <span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span>) &#123;<br>      data[i] = data[i - <span class=\"hljs-number\">4</span>];<br>      data[i + <span class=\"hljs-number\">1</span>] = data[i - <span class=\"hljs-number\">3</span>];<br>      data[i + <span class=\"hljs-number\">2</span>] = data[i - <span class=\"hljs-number\">2</span>];<br>      data[i + <span class=\"hljs-number\">3</span>] = data[i - <span class=\"hljs-number\">1</span>];<br>      i += <span class=\"hljs-number\">4</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      data[i] = <span class=\"hljs-number\">2</span> * data[i] - data[i + <span class=\"hljs-number\">4</span>] - <span class=\"hljs-number\">0.5</span> * data[i + <span class=\"hljs-number\">4</span>];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"各种滤镜实现效果\"><a href=\"#各种滤镜实现效果\" class=\"headerlink\" title=\"各种滤镜实现效果\"></a>各种滤镜实现效果</h3><iframe \n  class=\"live-sample-frame sample-code-frame\" \n  frameborder=\"0\" \n  height=\"600\" \n  width=\"100%\" \n  loading=\"lazy\"      \n  style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"fullscreen; accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" \n  src=\"https://iaosee.com/html5-canvas-core/#/Demo.40\">\n</iframe>\n\n<p><a href=\"https://iaosee.com/html5-canvas-core/#/Demo.40\">查看完整 Demo 效果</a></p>\n<h2 id=\"视频渲染\"><a href=\"#视频渲染\" class=\"headerlink\" title=\"视频渲染\"></a>视频渲染</h2><p><code>drawImage()</code> 方法不仅可以绘制图片资源，还支持 HTMLVideoElement、 VideoFrame 用于绘制视频中的数据，视频其实是多个图像序列，视频的每一帧就是一个静态图像，通过 Canvas 上不断绘制视频的每一帧实现视频播放。当调用 <code>drawImage(video, 0, 0)</code> 时，会将该 HTMLVideoElement 中视频文件的某一帧绘制到画面上，这样我们就可以结合 video 与 canvas 来做实时视频处理了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> video = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;video&#x27;</span>);<br>video.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&#x27;video_url&#x27;</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">playVideo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!video.<span class=\"hljs-property\">paused</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">nextVideoFrame</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    context.<span class=\"hljs-title function_\">drawImage</span>(video, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-title function_\">requestAnimationFrame</span>(nextVideoFrame);<br>  &#125;;<br><br>  video.<span class=\"hljs-title function_\">play</span>();<br>  <span class=\"hljs-title function_\">requestAnimationFrame</span>(nextVideoFrame);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pauseVideo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">pause</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们还可以将用户媒体数据绘制到画布上去。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> userMedia = <span class=\"hljs-keyword\">await</span> navigator.<span class=\"hljs-property\">mediaDevices</span>.<span class=\"hljs-title function_\">getUserMedia</span>(&#123;<br>  <span class=\"hljs-attr\">video</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">audio</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> userCapture = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageCapture</span>(userMedia.<span class=\"hljs-title function_\">getVideoTracks</span>()[<span class=\"hljs-number\">0</span>]);<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">render</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> userImageBitMap = <span class=\"hljs-keyword\">await</span> userCapture.<span class=\"hljs-title function_\">grabFrame</span>();<br>  context.<span class=\"hljs-title function_\">drawImage</span>(userImageBitMap, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-title function_\">requestAnimationFrame</span>(render);<br>&#125;<br><span class=\"hljs-title function_\">requestAnimationFrame</span>(render);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视频绘制例子\"><a href=\"#视频绘制例子\" class=\"headerlink\" title=\"视频绘制例子\"></a>视频绘制例子</h3><iframe \n  class=\"live-sample-frame sample-code-frame\" \n  frameborder=\"0\" \n  height=\"600\" \n  width=\"100%\" \n  loading=\"lazy\"      \n  style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"fullscreen; accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" \n  src=\"https://iaosee.com/html5-canvas-core/#/Demo.45\">\n</iframe>\n\n<p><a href=\"https://iaosee.com/html5-canvas-core/#/Demo.45\">查看完整 Demo 效果</a></p>\n<h2 id=\"像素处理性能优化\"><a href=\"#像素处理性能优化\" class=\"headerlink\" title=\"像素处理性能优化\"></a>像素处理性能优化</h2><p>在处理大图像数据时，很容易遇到性能瓶颈，可以考虑将图像处理的任务交给工作线程 —— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API\">Web Worker</a> 来处理，这样将耗时的数据处理代码放在主线程之外执行。</p>\n<p>Canvas 图像操作中注意事项：</p>\n<p>图像绘制安全问题： 出于安全考虑，HTML5 Canvas 规范虽允许绘制其他域中的图片，但是默认不能通过 Canvas API 保存和修改其他域中的图片，同时也不能保存和修改用户文件系统中图形。</p>\n<ul>\n<li><code>drawImage()</code> 优于 <code>putImageData()</code></li>\n<li>将 Canvas 绘制到自身很耗时</li>\n<li>绘制 Canvas 时对其缩放也很耗时</li>\n<li>避免在循环体内直接访问对象属性，应将其保存到局部变量</li>\n<li>应使用循环计步器遍历一个完整像素，而非像素分量</li>\n<li>避免频繁调用 <code>getImageData()</code> 获取少量数据</li>\n</ul>\n<h3 id=\"离屏-Canvas\"><a href=\"#离屏-Canvas\" class=\"headerlink\" title=\"离屏 Canvas\"></a>离屏 Canvas</h3><p>在大量的像素操作的情况下，对于 Canvas 来说是很消耗性能的，这时候可以使用离屏 Canvas 来优化性能。离屏 Canvas 对性能优化非常有用，可以提高绘制效率。</p>\n<p>在较新的浏览器中，新增了脱离屏幕渲染的 Canvas 对象。 <code>OffscreenCanvas</code> 对象，可以使用 <code>new OffscreenCanvas(width, height)</code> 创建一个离屏 Canvas  <code>OffscreenCanvas</code> 对象, 使用 <code>getContext(&#39;2d&#39;)</code> 获得一个 <code>OffscreenCanvasRenderingContext2D</code> 上下文，使用方式与 <code>CanvasRenderingContext2D</code> 方式基本一致，离屏 Cavnas 优先使用 <code>OffscreenCanvas</code>。</p>\n<p>另一种使用 OffscreenCanvas API 的方式，是在一个 <code>&lt;canvas&gt;</code> 元素上调用 <code>transferControlToOffscreen()</code> 方法会返回一个 <code>OffscreenCanvas</code></p>\n<p>要使用离屏 Canvas 遵循一下四个步骤：</p>\n<ul>\n<li>创建用作离屏绘制的 Canvas 元素</li>\n<li>设置离屏 Canvas 的宽高</li>\n<li>在离屏 Canvas 中进行绘制</li>\n<li>将离屏 Canvas 中的全部或部分内容复制到要显示的 Canvas 中</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">HTMLCanvasElement</span>;<br><span class=\"hljs-keyword\">const</span> context = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);<br><span class=\"hljs-comment\">// const offScreenCanvas = document.createElement(&#x27;canvas&#x27;);</span><br><span class=\"hljs-keyword\">const</span> offScreenCanvas = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OffscreenCanvas</span>(canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>);<br><span class=\"hljs-keyword\">const</span> offScreenContext = offScreenCanvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);<br><br>offScreenCanvas.<span class=\"hljs-property\">width</span> = canvas.<span class=\"hljs-property\">width</span>;<br>offScreenCanvas.<span class=\"hljs-property\">height</span> = canvas.<span class=\"hljs-property\">height</span>;<br><br>offScreenContext.<span class=\"hljs-title function_\">drawImage</span>(image, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>context.<span class=\"hljs-title function_\">drawImage</span>(offScreenCanvas, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n","more":"<h2 id=\"图像操作-API\"><a href=\"#图像操作-API\" class=\"headerlink\" title=\"图像操作 API\"></a>图像操作 API</h2><p>图像操作相关接口：</p>\n<ul>\n<li><code>drawImage()</code> 绘制图像到 Canvas 画布，该方法有三个重载方式。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">文档</a></li>\n<li><code>getImageData()</code> 返回一个 ImageData 对象，用于描述 canvas 指定区域的隐含像素数据。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData\">文档</a></li>\n<li><code>putImageData()</code> 将数据从已有的 ImageData 对象绘制到画布上。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData\">文档</a></li>\n<li><code>createImageData()</code> 用于创建一个新的、空白的、指定大小的 ImageData 对象。所有的像素在新对象中都是透明的黑色。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createImageData\">文档</a></li>\n</ul>\n<p>Canvas 2D API 的 <code>drawImage()</code> 有三个重载方法提供了多种在画布（Canvas）上绘制图像的方式。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasDrawImage</span> &#123;<br>    <span class=\"hljs-comment\">/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) */</span><br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dh</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">drawImage</span>(<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">CanvasImageSource</span>, <span class=\"hljs-attr\">sx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sh</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dw</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">dh</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>drawImage()</code> 方法接收一个 <code>CanvasImageSource</code> 类型的数据，这些 <code>HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas | VideoFrame</code> 都可以往 Canvas 画布上绘制。</p>\n<h2 id=\"操作图形像素\"><a href=\"#操作图形像素\" class=\"headerlink\" title=\"操作图形像素\"></a>操作图形像素</h2><h3 id=\"ImageData-介绍\"><a href=\"#ImageData-介绍\" class=\"headerlink\" title=\"ImageData 介绍\"></a>ImageData 介绍</h3><p>ImageData 接口描述 <code>&lt;canvas&gt;</code> 元素的一个隐含像素数据的区域。使用 ImageData() 构造函数创建，或者使用 CanvasRenderingContext2D 对象上的 创建方法 <code>context.createImageData()</code> 和 获取方法 <code>context.getImageData()</code>。也可以使用 <code>context.putImageData()</code> 设置 canvas 的一部分区域。</p>\n<p><code>getImageData()</code> &#x2F; <code>putImageData()</code> 两个方法分别用于获取像素和填充像素，同时也可以修改像素中的值以达到预期效果。getImageData() 方法返回一个 ImageData 类型对象，包含三个属性:</p>\n<ul>\n<li><code>width</code> 以设备像素为单位的图像数据宽度</li>\n<li><code>height</code> 以设备像素为单位的图像数据高度</li>\n<li><code>data</code> 包含各个设备像素值得数组，每个值中包含的颜色分量，都是含有 8 位二进制的整数, 使用 TypedArray 形式 ArrayBuffer 来存储数据</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> imgdata = context.<span class=\"hljs-title function_\">getImageData</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>)<br><span class=\"hljs-keyword\">const</span> data = imgdata.<span class=\"hljs-property\">data</span>;<br><span class=\"hljs-keyword\">const</span> length = imgdata.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">length</span>;<br><span class=\"hljs-keyword\">const</span> width = imgdata.<span class=\"hljs-property\">width</span>;<br><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// red</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// green</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// blue</span><br>imgdata.<span class=\"hljs-property\">data</span>[<span class=\"hljs-number\">0</span>]       <span class=\"hljs-comment\">// alpha</span><br><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">4</span>]   <span class=\"hljs-comment\">// red</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">3</span>]   <span class=\"hljs-comment\">// green</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">2</span>]   <span class=\"hljs-comment\">// blue</span><br>imgdata.<span class=\"hljs-property\">data</span>[n - <span class=\"hljs-number\">1</span>]   <span class=\"hljs-comment\">// alpha</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常见图像像素遍历方式\"><a href=\"#常见图像像素遍历方式\" class=\"headerlink\" title=\"常见图像像素遍历方式\"></a>常见图像像素遍历方式</h3><p>遍历每个像素</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) &#123;<br>  <span class=\"hljs-keyword\">const</span> pixel = data[i]<br>  <span class=\"hljs-comment\">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反向遍历每个像素</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> i = length - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (i &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>  data[i--]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只处理 alpha 值，不改变 r,g,b</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>只处理  r,g,b 值，不改变 alpha</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i]               <span class=\"hljs-comment\">// red</span><br>  data[i + <span class=\"hljs-number\">1</span>]           <span class=\"hljs-comment\">// green</span><br>  data[i + <span class=\"hljs-number\">2</span>]           <span class=\"hljs-comment\">// blue</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"图像滤镜实现\"><a href=\"#图像滤镜实现\" class=\"headerlink\" title=\"图像滤镜实现\"></a>图像滤镜实现</h2><p>了解到如何获取和操作像素之后，接下来就可以给图片实现各种滤镜了，滤镜的原理其实就是对图像像素的各种操作，给图像像素做一些改动，主要在于各种滤镜算法实现。</p>\n<h3 id=\"常见图像滤镜\"><a href=\"#常见图像滤镜\" class=\"headerlink\" title=\"常见图像滤镜\"></a>常见图像滤镜</h3><p>负片滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  data[i] = <span class=\"hljs-number\">255</span> - data[i];<br>  data[i + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">255</span> - data[i + <span class=\"hljs-number\">1</span>];<br>  data[i + <span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">255</span> - data[i + <span class=\"hljs-number\">2</span>];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>黑白滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i += <span class=\"hljs-number\">4</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> average = (data[i] + data[i + <span class=\"hljs-number\">1</span>] + data[i + <span class=\"hljs-number\">2</span>]) / <span class=\"hljs-number\">3</span>;<br>  data[i] = average;<br>  data[i + <span class=\"hljs-number\">1</span>] = average;<br>  data[i + <span class=\"hljs-number\">2</span>] = average;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>浮雕滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) &#123;<br>  <span class=\"hljs-comment\">// 防止超出边界</span><br>  <span class=\"hljs-keyword\">if</span> (i &lt;= length - width * <span class=\"hljs-number\">4</span>) &#123;<br>    <span class=\"hljs-comment\">// 不是 alpha</span><br>    <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-comment\">// 如果是一行的最后一个像素，右边不会有像素，拷贝前一个像素值</span><br>      <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">4</span>) % (width * <span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span>) &#123;<br>        data[i] = data[i - <span class=\"hljs-number\">4</span>];<br>        data[i + <span class=\"hljs-number\">1</span>] = data[i - <span class=\"hljs-number\">3</span>];<br>        data[i + <span class=\"hljs-number\">2</span>] = data[i - <span class=\"hljs-number\">2</span>];<br>        data[i + <span class=\"hljs-number\">3</span>] = data[i - <span class=\"hljs-number\">1</span>];<br>        i += <span class=\"hljs-number\">4</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 不是一行的最后一个像素</span><br>        data[i] =<br>          <span class=\"hljs-number\">255</span> / <span class=\"hljs-number\">2</span> + <span class=\"hljs-comment\">// Average value</span><br>          <span class=\"hljs-number\">2</span> * data[i] - <span class=\"hljs-comment\">// current pixel</span><br>          data[i + <span class=\"hljs-number\">4</span>] - <span class=\"hljs-comment\">// next pixel</span><br>          data[i + width * <span class=\"hljs-number\">4</span>]; <span class=\"hljs-comment\">// pixel underneath</span><br>      &#125;<br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <br>    <span class=\"hljs-comment\">// 最后一行，下方没有像素，拷贝上方像素</span><br>    <span class=\"hljs-keyword\">if</span> ( (i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>      data[i] = data[i - width * <span class=\"hljs-number\">4</span>];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>墨镜滤镜</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">4</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">4</span> !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> ( (i + <span class=\"hljs-number\">4</span>) % (width * <span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span>) &#123;<br>      data[i] = data[i - <span class=\"hljs-number\">4</span>];<br>      data[i + <span class=\"hljs-number\">1</span>] = data[i - <span class=\"hljs-number\">3</span>];<br>      data[i + <span class=\"hljs-number\">2</span>] = data[i - <span class=\"hljs-number\">2</span>];<br>      data[i + <span class=\"hljs-number\">3</span>] = data[i - <span class=\"hljs-number\">1</span>];<br>      i += <span class=\"hljs-number\">4</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      data[i] = <span class=\"hljs-number\">2</span> * data[i] - data[i + <span class=\"hljs-number\">4</span>] - <span class=\"hljs-number\">0.5</span> * data[i + <span class=\"hljs-number\">4</span>];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"各种滤镜实现效果\"><a href=\"#各种滤镜实现效果\" class=\"headerlink\" title=\"各种滤镜实现效果\"></a>各种滤镜实现效果</h3><iframe \n  class=\"live-sample-frame sample-code-frame\" \n  frameborder=\"0\" \n  height=\"600\" \n  width=\"100%\" \n  loading=\"lazy\"      \n  style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"fullscreen; accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" \n  src=\"https://iaosee.com/html5-canvas-core/#/Demo.40\">\n</iframe>\n\n<p><a href=\"https://iaosee.com/html5-canvas-core/#/Demo.40\">查看完整 Demo 效果</a></p>\n<h2 id=\"视频渲染\"><a href=\"#视频渲染\" class=\"headerlink\" title=\"视频渲染\"></a>视频渲染</h2><p><code>drawImage()</code> 方法不仅可以绘制图片资源，还支持 HTMLVideoElement、 VideoFrame 用于绘制视频中的数据，视频其实是多个图像序列，视频的每一帧就是一个静态图像，通过 Canvas 上不断绘制视频的每一帧实现视频播放。当调用 <code>drawImage(video, 0, 0)</code> 时，会将该 HTMLVideoElement 中视频文件的某一帧绘制到画面上，这样我们就可以结合 video 与 canvas 来做实时视频处理了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> video = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;video&#x27;</span>);<br>video.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&#x27;video_url&#x27;</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">playVideo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!video.<span class=\"hljs-property\">paused</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">nextVideoFrame</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    context.<span class=\"hljs-title function_\">drawImage</span>(video, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-title function_\">requestAnimationFrame</span>(nextVideoFrame);<br>  &#125;;<br><br>  video.<span class=\"hljs-title function_\">play</span>();<br>  <span class=\"hljs-title function_\">requestAnimationFrame</span>(nextVideoFrame);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pauseVideo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">pause</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们还可以将用户媒体数据绘制到画布上去。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> userMedia = <span class=\"hljs-keyword\">await</span> navigator.<span class=\"hljs-property\">mediaDevices</span>.<span class=\"hljs-title function_\">getUserMedia</span>(&#123;<br>  <span class=\"hljs-attr\">video</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">audio</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> userCapture = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageCapture</span>(userMedia.<span class=\"hljs-title function_\">getVideoTracks</span>()[<span class=\"hljs-number\">0</span>]);<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">render</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> userImageBitMap = <span class=\"hljs-keyword\">await</span> userCapture.<span class=\"hljs-title function_\">grabFrame</span>();<br>  context.<span class=\"hljs-title function_\">drawImage</span>(userImageBitMap, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-title function_\">requestAnimationFrame</span>(render);<br>&#125;<br><span class=\"hljs-title function_\">requestAnimationFrame</span>(render);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视频绘制例子\"><a href=\"#视频绘制例子\" class=\"headerlink\" title=\"视频绘制例子\"></a>视频绘制例子</h3><iframe \n  class=\"live-sample-frame sample-code-frame\" \n  frameborder=\"0\" \n  height=\"600\" \n  width=\"100%\" \n  loading=\"lazy\"      \n  style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"fullscreen; accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" \n  src=\"https://iaosee.com/html5-canvas-core/#/Demo.45\">\n</iframe>\n\n<p><a href=\"https://iaosee.com/html5-canvas-core/#/Demo.45\">查看完整 Demo 效果</a></p>\n<h2 id=\"像素处理性能优化\"><a href=\"#像素处理性能优化\" class=\"headerlink\" title=\"像素处理性能优化\"></a>像素处理性能优化</h2><p>在处理大图像数据时，很容易遇到性能瓶颈，可以考虑将图像处理的任务交给工作线程 —— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API\">Web Worker</a> 来处理，这样将耗时的数据处理代码放在主线程之外执行。</p>\n<p>Canvas 图像操作中注意事项：</p>\n<p>图像绘制安全问题： 出于安全考虑，HTML5 Canvas 规范虽允许绘制其他域中的图片，但是默认不能通过 Canvas API 保存和修改其他域中的图片，同时也不能保存和修改用户文件系统中图形。</p>\n<ul>\n<li><code>drawImage()</code> 优于 <code>putImageData()</code></li>\n<li>将 Canvas 绘制到自身很耗时</li>\n<li>绘制 Canvas 时对其缩放也很耗时</li>\n<li>避免在循环体内直接访问对象属性，应将其保存到局部变量</li>\n<li>应使用循环计步器遍历一个完整像素，而非像素分量</li>\n<li>避免频繁调用 <code>getImageData()</code> 获取少量数据</li>\n</ul>\n<h3 id=\"离屏-Canvas\"><a href=\"#离屏-Canvas\" class=\"headerlink\" title=\"离屏 Canvas\"></a>离屏 Canvas</h3><p>在大量的像素操作的情况下，对于 Canvas 来说是很消耗性能的，这时候可以使用离屏 Canvas 来优化性能。离屏 Canvas 对性能优化非常有用，可以提高绘制效率。</p>\n<p>在较新的浏览器中，新增了脱离屏幕渲染的 Canvas 对象。 <code>OffscreenCanvas</code> 对象，可以使用 <code>new OffscreenCanvas(width, height)</code> 创建一个离屏 Canvas  <code>OffscreenCanvas</code> 对象, 使用 <code>getContext(&#39;2d&#39;)</code> 获得一个 <code>OffscreenCanvasRenderingContext2D</code> 上下文，使用方式与 <code>CanvasRenderingContext2D</code> 方式基本一致，离屏 Cavnas 优先使用 <code>OffscreenCanvas</code>。</p>\n<p>另一种使用 OffscreenCanvas API 的方式，是在一个 <code>&lt;canvas&gt;</code> 元素上调用 <code>transferControlToOffscreen()</code> 方法会返回一个 <code>OffscreenCanvas</code></p>\n<p>要使用离屏 Canvas 遵循一下四个步骤：</p>\n<ul>\n<li>创建用作离屏绘制的 Canvas 元素</li>\n<li>设置离屏 Canvas 的宽高</li>\n<li>在离屏 Canvas 中进行绘制</li>\n<li>将离屏 Canvas 中的全部或部分内容复制到要显示的 Canvas 中</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">HTMLCanvasElement</span>;<br><span class=\"hljs-keyword\">const</span> context = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);<br><span class=\"hljs-comment\">// const offScreenCanvas = document.createElement(&#x27;canvas&#x27;);</span><br><span class=\"hljs-keyword\">const</span> offScreenCanvas = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OffscreenCanvas</span>(canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>);<br><span class=\"hljs-keyword\">const</span> offScreenContext = offScreenCanvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);<br><br>offScreenCanvas.<span class=\"hljs-property\">width</span> = canvas.<span class=\"hljs-property\">width</span>;<br>offScreenCanvas.<span class=\"hljs-property\">height</span> = canvas.<span class=\"hljs-property\">height</span>;<br><br>offScreenContext.<span class=\"hljs-title function_\">drawImage</span>(image, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>context.<span class=\"hljs-title function_\">drawImage</span>(offScreenCanvas, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Canvas","path":"api/categories/Canvas.json"}],"tags":[{"name":"2D","path":"api/tags/2D.json"},{"name":"Canvas","path":"api/tags/Canvas.json"},{"name":"图形开发","path":"api/tags/图形开发.json"}]}