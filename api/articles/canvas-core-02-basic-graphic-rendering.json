{"title":"Canvas 基础图形绘制 — 矩形、圆形、曲线、多边形","slug":"canvas-core-02-basic-graphic-rendering","date":"2020-12-10T04:58:32.000Z","updated":"2020-12-10T04:58:32.000Z","comments":true,"path":"api/articles/canvas-core-02-basic-graphic-rendering.json","excerpt":null,"covers":null,"content":"<h2 id=\"路径绘制\"><a href=\"#路径绘制\" class=\"headerlink\" title=\"路径绘制\"></a>路径绘制</h2><p>在 Canvas 中绘制形状大致分为两个步骤，先是 <strong>创建路径</strong>，然后为创建的路径 <strong>填充颜色</strong>。填充颜色可以选择<strong>描边</strong>或者<strong>填充</strong>，或者两者同时应用。</p>\n<p><code>CanvasRenderingContext2D</code> 中路径相关的 API：只通过这些基础的路径 API 就可以创建任何想要的形状了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasPath</span> &#123;<br>  <span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">endAngle</span>: <span class=\"hljs-built_in\">number</span>, counterclockwise?: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">arcTo</span>(<span class=\"hljs-attr\">x1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x2</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y2</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">bezierCurveTo</span>(<span class=\"hljs-attr\">cp1x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp1y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp2x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp2y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">closePath</span>(): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">ellipse</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radiusX</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radiusY</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">rotation</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">endAngle</span>: <span class=\"hljs-built_in\">number</span>, counterclockwise?: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">quadraticCurveTo</span>(<span class=\"hljs-attr\">cpx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cpy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">rect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>创建路径之后，通过 <code>fillStyle</code> &#x2F; <code>strokeStyle</code> 设置填充样式或者轮廓样式，使用 <code>fill()</code> 或者 <code>stroke()</code> 进行填充颜色或者只上轮廓色。</p>\n<ul>\n<li><code>fillStyle</code> 对应 <code>fill()</code> 填充的样式</li>\n<li><code>strokeStyle</code> 对应 <code>stroke()</code> 轮廓的样式</li>\n</ul>\n<p><code>fillStyle</code> &#x2F; <code>strokeStyle</code> 接收的值可以是 <em>CSS 颜色字符串</em> 或者一个 <code>CanvasGradient</code> &#x2F; <code>CanvasPattern</code> 。</p>\n<p>对于一些复杂的图像，都是基于路径绘制的。基于路径绘图，首先需要调用 <code>beginPath()</code> 方法来开启一段新路径，调用各个路径方法用于创建不同的路径。然后调用 <code>stroke()</code> &#x2F; <code>fill()</code> 进行描边和填充。想要关闭某段路径，则需要调用 <code>closePath()</code> 方法，描边与填充的效果取决于当前绘图属性。</p>\n<p>填充路径时使用 <a href=\"https://zhuanlan.zhihu.com/p/113411760\"><code>非零环绕规则</code></a>，用来判断哪块区域是里面，哪块区域是外面，从而在填充不规则复杂图形时表示那块区域要填充或不填充。—— 对于路径中的任意给定区域，从该区域内部画一条足够长的线段，使此线段的终点完全落在路径范围之外。然后将计数器初始化为零，如果与路径的顺时针方向相交，计数器加 1， 与路径的逆时针方向，计数器减 1，若最后计数器的结果不为零，那么此区域就在路径里面，在调用 <code>fill()</code> 方法时，就会进行填充。</p>\n<h2 id=\"画线与文本\"><a href=\"#画线与文本\" class=\"headerlink\" title=\"画线与文本\"></a>画线与文本</h2><p>若在像素边界处绘制 1 像素宽的线，那么该线会占据 2 个像素宽度，线相关的 API：</p>\n<ul>\n<li><code>moveTo(x, y)</code> 向当前路径中增加一条子路径</li>\n<li><code>lineTo(x, y)</code> 如果当前路径中没有子路径，它的行为就和 <code>moveTo()</code> 方法行为一样，若当前存在子路径，会将制定的点添加到子路径中。</li>\n<li><code>setLineDash([10, 20])</code>  绘制虚线，设置虚线间断</li>\n</ul>\n<p>文本绘制相关 API ：</p>\n<ul>\n<li><p><code>font</code> 指定字体样式&#x2F;大小，一个 CSS3 属性字符串，顺序为 <code>font-style font-variant font-weight font-size font-height font-family</code></p>\n</li>\n<li><p><code>textAlign</code> 指定对齐方式，取值 <code>start|center|end|left|right</code></p>\n</li>\n<li><p><code>textBaseline</code> 指定文本基线对齐方式，取值 <code>top|bottom|middle|alphabetic|ideographic|hanging</code> </p>\n</li>\n<li><p><code>strokeText(text, x, y)</code>  文本描边</p>\n</li>\n<li><p><code>fillText(text, x, y)</code>  文本填充</p>\n</li>\n<li><p><code>measureText(text)</code>  测量文本 在当前上下文状态中的信息 返回 <code>TextMetrics</code> 类型的值</p>\n</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.01&module=%2Fsrc%2Fdemo%2FDemo.01.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h2 id=\"矩形填充与描边\"><a href=\"#矩形填充与描边\" class=\"headerlink\" title=\"矩形填充与描边\"></a>矩形填充与描边</h2><p>绘制矩形的 API:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasRect</span> &#123;<br>    <span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">strokeRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>简单矩形绘制，矩形描边：</p>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.02&module=%2Fsrc%2Fdemo%2FDemo.02.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h2 id=\"圆形与椭圆\"><a href=\"#圆形与椭圆\" class=\"headerlink\" title=\"圆形与椭圆\"></a>圆形与椭圆</h2><iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.03&module=%2Fsrc%2Fdemo%2FDemo.03.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"内容填充\"><a href=\"#内容填充\" class=\"headerlink\" title=\"内容填充\"></a>内容填充</h2><p>可以给绘制的图形填充一些东西，包括颜色，渐变，图案，通过设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fillStyle\"><code>fillStyle</code></a> 属性来指定填充样式，<code>fillStyle</code> 属性接收的值有三种类型，分别是：<code>string | CanvasGradient | CanvasPattern</code>。填充图形通常的步骤是：<strong>设置填充样式 -&gt; 创建路径 -&gt; 调用 <code>fill()</code> 方法填充</strong>。</p>\n<ul>\n<li><code>string</code> 一个 CSS 颜色字符串</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasGradient\"><code>CanvasGradient</code></a> 通过 <code>createLinearGradient()</code> 或 <code>createRadialGradient()</code> 方法创建的渐变</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasPattern\"><code>CanvasPattern</code></a> 通过 <code>createPattern()</code> 方法创建的模式</li>\n</ul>\n<p>Canvas 中渐变填充支持 <code>线性渐变(linear)</code> 和 <code>径向渐变(radial)</code> 。</p>\n<h3 id=\"线性渐变填充\"><a href=\"#线性渐变填充\" class=\"headerlink\" title=\"线性渐变填充\"></a>线性渐变填充</h3><p>线性渐变需要两个点的坐标，Canvas 会根据两点之间的连线来建立渐变效果。</p>\n<p>使用 <code>createLinearGradient(x0, y0, x1, y1)</code> 方法创建渐变，返回一个 <code>CanvasGradient</code> 实例，通过它的 <code>addColorStop(percentage, color)</code> 方法添加 <code>颜色停止点</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> gradient = context.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span>, <span class=\"hljs-number\">0</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.00</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.50</span>, <span class=\"hljs-string\">&#x27;red&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1.00</span>, <span class=\"hljs-string\">&#x27;yellow&#x27;</span>);<br>context.<span class=\"hljs-property\">fillStyle</span> = gradient;<br>context.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span> / <span class=\"hljs-number\">2</span>,  canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.04&module=%2Fsrc%2Fdemo%2FDemo.04.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h3 id=\"径向渐变填充\"><a href=\"#径向渐变填充\" class=\"headerlink\" title=\"径向渐变填充\"></a>径向渐变填充</h3><p>径向渐变需要两个圆形，canvas 会根据两个圆之间的范围来建立渐变效果。<br>使用 <code>createRadialGradient(x0, y0, r0, x1, y1, r1)</code> 方法创建渐变实例，返回一个 <code>CanvasGradient</code> 实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> gradient = context.<span class=\"hljs-title function_\">createRadialGradient</span>(<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">20</span>,<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">200</span><br>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-string\">&#x27;yellow&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-string\">&#x27;white&#x27;</span>);<br>context.<span class=\"hljs-property\">fillStyle</span> = gradient;<br>context.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerY</span>, canvas.<span class=\"hljs-property\">width</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.05&module=%2Fsrc%2Fdemo%2FDemo.05.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h3 id=\"图案填充\"><a href=\"#图案填充\" class=\"headerlink\" title=\"图案填充\"></a>图案填充</h3><p>使用 <code>createPattern(image: CanvasImageSource, repetition: string)</code> 方法创建图案，返回一个 <code>CanvasPattern</code> 实例。 Canvas 允许使用图案来对图形和文本进行填充和描边，图案又可分为这些类型：</p>\n<ul>\n<li><code>Image</code> 图像元素 可以是 <code>HTMLImageElement | SVGImageElement ｜ ImageBitmap</code></li>\n<li><code>Canvas</code> Canvas 画布元素</li>\n<li><code>Video</code> 视频元素</li>\n</ul>\n<p>参数介绍：</p>\n<ul>\n<li><code>image</code> - <code>HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap</code></li>\n<li><code>repetition</code> - <code>repeat | repeat-x | repeat-y | no-repeat</code></li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.06&module=%2Fsrc%2Fdemo%2FDemo.06.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"阴影效果\"><a href=\"#阴影效果\" class=\"headerlink\" title=\"阴影效果\"></a>阴影效果</h2><p>可以通过下列 4 个属性值来指定 图形、图像、文本 阴影效果，设置阴影的属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasShadowStyles</span> &#123;<br>  <span class=\"hljs-attr\">shadowBlur</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">shadowOffsetX</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-attr\">shadowOffsetY</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>shadowColor</code> CSS3 格式支持的颜色值</p>\n</li>\n<li><p><code>shadowOffsetX</code> 阴影的水平像素偏移，像素为单位，默认 0</p>\n</li>\n<li><p><code>shadowOffsetY</code> 阴影的垂直像素偏移，像素为单位，默认 0</p>\n</li>\n<li><p><code>shadowBlur</code> 阴影模糊值，默认 0</p>\n</li>\n<li><p>将 <code>shadowColor</code> 设置为 <code>underfined</code> 可以禁用阴影效果。</p>\n</li>\n<li><p>将 <code>shadowOffsetX</code> 和 <code>shadowOffsetY</code> 可以为负值，以显示内阴影效果。</p>\n</li>\n</ul>\n<p>阴影效果的绘制可能会比较耗时，特别是动画时候运用阴影效果，需要考虑性能问题。</p>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.07&module=%2Fsrc%2Fdemo%2FDemo.07.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><ul>\n<li><code>quadraticCurveTo(cpx: number, cpy: number, x: number, y: number)</code> 创建一条表示二次贝塞尔曲线的路径，前两个参数控制点坐标，后两个是锚点坐标。</li>\n<li><code>bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)</code> 创建一条表示三次贝塞尔曲线的路径，参数为三个点坐标，前两个点为曲线控制点，最后一个为锚点。</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.08&module=%2Fsrc%2Fdemo%2FDemo.08.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"任意多边形\"><a href=\"#任意多边形\" class=\"headerlink\" title=\"任意多边形\"></a>任意多边形</h2><p>Canvas 接口本身未提供直接绘制多边形的接口，需要自己实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPolygonPoints</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">center</span>: <span class=\"hljs-title class_\">Point</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sides</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">points</span>: <span class=\"hljs-title class_\">Point</span>[] = [];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; sides; i++) &#123;<br>    points.<span class=\"hljs-title function_\">push</span>(&#123;<br>      <span class=\"hljs-attr\">x</span>: center.<span class=\"hljs-property\">x</span> + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>(startAngle) * radius,<br>      <span class=\"hljs-attr\">y</span>: center.<span class=\"hljs-property\">y</span> - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">cos</span>(startAngle) * radius<br>    &#125;);<br>    startAngle += (<span class=\"hljs-number\">2</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>) / sides;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> points;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">drawPolygonPath</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">center</span>: <span class=\"hljs-title class_\">Point</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sides</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> points = <span class=\"hljs-title function_\">getPolygonPoints</span>(center, radius, sides, startAngle);<br>  context.<span class=\"hljs-title function_\">beginPath</span>();<br>  context.<span class=\"hljs-title function_\">moveTo</span>(points[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span>, points[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span>);<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; sides; ++i) &#123;<br>    context.<span class=\"hljs-title function_\">lineTo</span>(points[i].<span class=\"hljs-property\">x</span>, points[i].<span class=\"hljs-property\">y</span>);<br>  &#125;<br>  context.<span class=\"hljs-title function_\">closePath</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.09&module=%2Fsrc%2Fdemo%2FDemo.09.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n","more":"<h2 id=\"路径绘制\"><a href=\"#路径绘制\" class=\"headerlink\" title=\"路径绘制\"></a>路径绘制</h2><p>在 Canvas 中绘制形状大致分为两个步骤，先是 <strong>创建路径</strong>，然后为创建的路径 <strong>填充颜色</strong>。填充颜色可以选择<strong>描边</strong>或者<strong>填充</strong>，或者两者同时应用。</p>\n<p><code>CanvasRenderingContext2D</code> 中路径相关的 API：只通过这些基础的路径 API 就可以创建任何想要的形状了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasPath</span> &#123;<br>  <span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">endAngle</span>: <span class=\"hljs-built_in\">number</span>, counterclockwise?: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">arcTo</span>(<span class=\"hljs-attr\">x1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x2</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y2</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">bezierCurveTo</span>(<span class=\"hljs-attr\">cp1x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp1y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp2x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cp2y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">closePath</span>(): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">ellipse</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radiusX</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">radiusY</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">rotation</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">endAngle</span>: <span class=\"hljs-built_in\">number</span>, counterclockwise?: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">quadraticCurveTo</span>(<span class=\"hljs-attr\">cpx</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">cpy</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>  <span class=\"hljs-title function_\">rect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>创建路径之后，通过 <code>fillStyle</code> &#x2F; <code>strokeStyle</code> 设置填充样式或者轮廓样式，使用 <code>fill()</code> 或者 <code>stroke()</code> 进行填充颜色或者只上轮廓色。</p>\n<ul>\n<li><code>fillStyle</code> 对应 <code>fill()</code> 填充的样式</li>\n<li><code>strokeStyle</code> 对应 <code>stroke()</code> 轮廓的样式</li>\n</ul>\n<p><code>fillStyle</code> &#x2F; <code>strokeStyle</code> 接收的值可以是 <em>CSS 颜色字符串</em> 或者一个 <code>CanvasGradient</code> &#x2F; <code>CanvasPattern</code> 。</p>\n<p>对于一些复杂的图像，都是基于路径绘制的。基于路径绘图，首先需要调用 <code>beginPath()</code> 方法来开启一段新路径，调用各个路径方法用于创建不同的路径。然后调用 <code>stroke()</code> &#x2F; <code>fill()</code> 进行描边和填充。想要关闭某段路径，则需要调用 <code>closePath()</code> 方法，描边与填充的效果取决于当前绘图属性。</p>\n<p>填充路径时使用 <a href=\"https://zhuanlan.zhihu.com/p/113411760\"><code>非零环绕规则</code></a>，用来判断哪块区域是里面，哪块区域是外面，从而在填充不规则复杂图形时表示那块区域要填充或不填充。—— 对于路径中的任意给定区域，从该区域内部画一条足够长的线段，使此线段的终点完全落在路径范围之外。然后将计数器初始化为零，如果与路径的顺时针方向相交，计数器加 1， 与路径的逆时针方向，计数器减 1，若最后计数器的结果不为零，那么此区域就在路径里面，在调用 <code>fill()</code> 方法时，就会进行填充。</p>\n<h2 id=\"画线与文本\"><a href=\"#画线与文本\" class=\"headerlink\" title=\"画线与文本\"></a>画线与文本</h2><p>若在像素边界处绘制 1 像素宽的线，那么该线会占据 2 个像素宽度，线相关的 API：</p>\n<ul>\n<li><code>moveTo(x, y)</code> 向当前路径中增加一条子路径</li>\n<li><code>lineTo(x, y)</code> 如果当前路径中没有子路径，它的行为就和 <code>moveTo()</code> 方法行为一样，若当前存在子路径，会将制定的点添加到子路径中。</li>\n<li><code>setLineDash([10, 20])</code>  绘制虚线，设置虚线间断</li>\n</ul>\n<p>文本绘制相关 API ：</p>\n<ul>\n<li><p><code>font</code> 指定字体样式&#x2F;大小，一个 CSS3 属性字符串，顺序为 <code>font-style font-variant font-weight font-size font-height font-family</code></p>\n</li>\n<li><p><code>textAlign</code> 指定对齐方式，取值 <code>start|center|end|left|right</code></p>\n</li>\n<li><p><code>textBaseline</code> 指定文本基线对齐方式，取值 <code>top|bottom|middle|alphabetic|ideographic|hanging</code> </p>\n</li>\n<li><p><code>strokeText(text, x, y)</code>  文本描边</p>\n</li>\n<li><p><code>fillText(text, x, y)</code>  文本填充</p>\n</li>\n<li><p><code>measureText(text)</code>  测量文本 在当前上下文状态中的信息 返回 <code>TextMetrics</code> 类型的值</p>\n</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.01&module=%2Fsrc%2Fdemo%2FDemo.01.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h2 id=\"矩形填充与描边\"><a href=\"#矩形填充与描边\" class=\"headerlink\" title=\"矩形填充与描边\"></a>矩形填充与描边</h2><p>绘制矩形的 API:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasRect</span> &#123;<br>    <span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-title function_\">strokeRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">w</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">h</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>简单矩形绘制，矩形描边：</p>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.02&module=%2Fsrc%2Fdemo%2FDemo.02.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h2 id=\"圆形与椭圆\"><a href=\"#圆形与椭圆\" class=\"headerlink\" title=\"圆形与椭圆\"></a>圆形与椭圆</h2><iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.03&module=%2Fsrc%2Fdemo%2FDemo.03.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"内容填充\"><a href=\"#内容填充\" class=\"headerlink\" title=\"内容填充\"></a>内容填充</h2><p>可以给绘制的图形填充一些东西，包括颜色，渐变，图案，通过设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fillStyle\"><code>fillStyle</code></a> 属性来指定填充样式，<code>fillStyle</code> 属性接收的值有三种类型，分别是：<code>string | CanvasGradient | CanvasPattern</code>。填充图形通常的步骤是：<strong>设置填充样式 -&gt; 创建路径 -&gt; 调用 <code>fill()</code> 方法填充</strong>。</p>\n<ul>\n<li><code>string</code> 一个 CSS 颜色字符串</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasGradient\"><code>CanvasGradient</code></a> 通过 <code>createLinearGradient()</code> 或 <code>createRadialGradient()</code> 方法创建的渐变</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasPattern\"><code>CanvasPattern</code></a> 通过 <code>createPattern()</code> 方法创建的模式</li>\n</ul>\n<p>Canvas 中渐变填充支持 <code>线性渐变(linear)</code> 和 <code>径向渐变(radial)</code> 。</p>\n<h3 id=\"线性渐变填充\"><a href=\"#线性渐变填充\" class=\"headerlink\" title=\"线性渐变填充\"></a>线性渐变填充</h3><p>线性渐变需要两个点的坐标，Canvas 会根据两点之间的连线来建立渐变效果。</p>\n<p>使用 <code>createLinearGradient(x0, y0, x1, y1)</code> 方法创建渐变，返回一个 <code>CanvasGradient</code> 实例，通过它的 <code>addColorStop(percentage, color)</code> 方法添加 <code>颜色停止点</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> gradient = context.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span>, <span class=\"hljs-number\">0</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.00</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.50</span>, <span class=\"hljs-string\">&#x27;red&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1.00</span>, <span class=\"hljs-string\">&#x27;yellow&#x27;</span>);<br>context.<span class=\"hljs-property\">fillStyle</span> = gradient;<br>context.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span> / <span class=\"hljs-number\">2</span>,  canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.04&module=%2Fsrc%2Fdemo%2FDemo.04.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<h3 id=\"径向渐变填充\"><a href=\"#径向渐变填充\" class=\"headerlink\" title=\"径向渐变填充\"></a>径向渐变填充</h3><p>径向渐变需要两个圆形，canvas 会根据两个圆之间的范围来建立渐变效果。<br>使用 <code>createRadialGradient(x0, y0, r0, x1, y1, r1)</code> 方法创建渐变实例，返回一个 <code>CanvasGradient</code> 实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">const</span> gradient = context.<span class=\"hljs-title function_\">createRadialGradient</span>(<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">20</span>,<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerX</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">200</span><br>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-string\">&#x27;yellow&#x27;</span>);<br>gradient.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-string\">&#x27;white&#x27;</span>);<br>context.<span class=\"hljs-property\">fillStyle</span> = gradient;<br>context.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">centerY</span>, canvas.<span class=\"hljs-property\">width</span> / <span class=\"hljs-number\">2</span>, canvas.<span class=\"hljs-property\">height</span> / <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.05&module=%2Fsrc%2Fdemo%2FDemo.05.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h3 id=\"图案填充\"><a href=\"#图案填充\" class=\"headerlink\" title=\"图案填充\"></a>图案填充</h3><p>使用 <code>createPattern(image: CanvasImageSource, repetition: string)</code> 方法创建图案，返回一个 <code>CanvasPattern</code> 实例。 Canvas 允许使用图案来对图形和文本进行填充和描边，图案又可分为这些类型：</p>\n<ul>\n<li><code>Image</code> 图像元素 可以是 <code>HTMLImageElement | SVGImageElement ｜ ImageBitmap</code></li>\n<li><code>Canvas</code> Canvas 画布元素</li>\n<li><code>Video</code> 视频元素</li>\n</ul>\n<p>参数介绍：</p>\n<ul>\n<li><code>image</code> - <code>HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap</code></li>\n<li><code>repetition</code> - <code>repeat | repeat-x | repeat-y | no-repeat</code></li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.06&module=%2Fsrc%2Fdemo%2FDemo.06.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"阴影效果\"><a href=\"#阴影效果\" class=\"headerlink\" title=\"阴影效果\"></a>阴影效果</h2><p>可以通过下列 4 个属性值来指定 图形、图像、文本 阴影效果，设置阴影的属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CanvasShadowStyles</span> &#123;<br>  <span class=\"hljs-attr\">shadowBlur</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">shadowOffsetX</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-attr\">shadowOffsetY</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>shadowColor</code> CSS3 格式支持的颜色值</p>\n</li>\n<li><p><code>shadowOffsetX</code> 阴影的水平像素偏移，像素为单位，默认 0</p>\n</li>\n<li><p><code>shadowOffsetY</code> 阴影的垂直像素偏移，像素为单位，默认 0</p>\n</li>\n<li><p><code>shadowBlur</code> 阴影模糊值，默认 0</p>\n</li>\n<li><p>将 <code>shadowColor</code> 设置为 <code>underfined</code> 可以禁用阴影效果。</p>\n</li>\n<li><p>将 <code>shadowOffsetX</code> 和 <code>shadowOffsetY</code> 可以为负值，以显示内阴影效果。</p>\n</li>\n</ul>\n<p>阴影效果的绘制可能会比较耗时，特别是动画时候运用阴影效果，需要考虑性能问题。</p>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.07&module=%2Fsrc%2Fdemo%2FDemo.07.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><ul>\n<li><code>quadraticCurveTo(cpx: number, cpy: number, x: number, y: number)</code> 创建一条表示二次贝塞尔曲线的路径，前两个参数控制点坐标，后两个是锚点坐标。</li>\n<li><code>bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)</code> 创建一条表示三次贝塞尔曲线的路径，参数为三个点坐标，前两个点为曲线控制点，最后一个为锚点。</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.08&module=%2Fsrc%2Fdemo%2FDemo.08.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n\n<h2 id=\"任意多边形\"><a href=\"#任意多边形\" class=\"headerlink\" title=\"任意多边形\"></a>任意多边形</h2><p>Canvas 接口本身未提供直接绘制多边形的接口，需要自己实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPolygonPoints</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">center</span>: <span class=\"hljs-title class_\">Point</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sides</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">points</span>: <span class=\"hljs-title class_\">Point</span>[] = [];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; sides; i++) &#123;<br>    points.<span class=\"hljs-title function_\">push</span>(&#123;<br>      <span class=\"hljs-attr\">x</span>: center.<span class=\"hljs-property\">x</span> + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>(startAngle) * radius,<br>      <span class=\"hljs-attr\">y</span>: center.<span class=\"hljs-property\">y</span> - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">cos</span>(startAngle) * radius<br>    &#125;);<br>    startAngle += (<span class=\"hljs-number\">2</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>) / sides;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> points;<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">drawPolygonPath</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">center</span>: <span class=\"hljs-title class_\">Point</span>, <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sides</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> points = <span class=\"hljs-title function_\">getPolygonPoints</span>(center, radius, sides, startAngle);<br>  context.<span class=\"hljs-title function_\">beginPath</span>();<br>  context.<span class=\"hljs-title function_\">moveTo</span>(points[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span>, points[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span>);<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; sides; ++i) &#123;<br>    context.<span class=\"hljs-title function_\">lineTo</span>(points[i].<span class=\"hljs-property\">x</span>, points[i].<span class=\"hljs-property\">y</span>);<br>  &#125;<br>  context.<span class=\"hljs-title function_\">closePath</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<iframe src=\"https://codesandbox.io/embed/canvas-test-demo-koccm?fontsize=14&hidenavigation=1&initialpath=%2F%23%2FDemo.09&module=%2Fsrc%2Fdemo%2FDemo.09.ts&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"canvas-test-demo\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n","categories":[{"name":"Canvas","path":"api/categories/Canvas.json"}],"tags":[{"name":"2D","path":"api/tags/2D.json"},{"name":"Canvas","path":"api/tags/Canvas.json"},{"name":"图形开发","path":"api/tags/图形开发.json"}]}